syntax = "proto3";

import "rpc.proto";

package routerrpc;

option go_package = "github.com/lightningnetwork/lnd/lnrpc/routerrpc";

message PaymentResponse {
    /**
    The payment hash that we paid to. Provided so callers are able to map
    responses (which may be streaming) back to their original requests.
    */
    bytes pay_hash = 1;

    /**
    The pre-image of the payment successfully completed.
    */
    bytes pre_image = 2;

    /**
    If not an empty string, then a string representation of the payment error.
    */
    string payment_err = 3;
}

message RouteFeeRequest {
    /**
    The destination once wishes to obtain a routing fee quote to.
    */
    bytes dest = 1;

    /**
    The amount one wishes to send to the target destination.
    */
    int64 amt_sat = 2;
}

message RouteFeeResponse {
    /**
    A lower bound of the estimated fee to the target destination within the
    network, expressed in milli-satoshis.
    */
    int64 routing_fee_msat = 1;

    /**
    An estimate of the worst case time delay that can occur. Note that callers
    will still need to factor in the final CLTV delta of the last hop into this
    value.
    */
    int64 time_lock_delay = 2;
}

service Router {
    /**
    SendPayment attempts to route a payment described by the passed
    PaymentRequest to the final destination. If we are unable to route the
    payment, or cannot find a route that satisfies the constraints in the
    PaymentRequest, then an error will be returned. Otherwise, the payment
    pre-image, along with the final route will be returned.
    */
    rpc SendPayment(lnrpc.SendRequest) returns (PaymentResponse);

    /**
    EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
    may cost to send an HTLC to the target end destination.
    */
    rpc EstimateRouteFee(lnrpc.SendRequest) returns (RouteFeeResponse);
}
